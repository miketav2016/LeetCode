package marchLeetCodingChallenge2021.week2March8_14

/**
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 * Return the minimum number of steps to make the given string empty.
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
 * A string is called palindrome if is one that reads the same backward as well as forward.
 */
object Solution8RemovePalindromicSubsequences {
  def removePalindromeSub0(s: String): Int = {
    def isPal(str: String) = {
      if (str.length == 1) true
      else {
        str == str.reverse
      }
    }

    def maxPal(string: String): Int = {
      string.foldLeft(("", "")) { case ((acc, tmp), cur) =>
        if (isPal(tmp + cur))
          (tmp + cur, tmp + cur)
        else
          (acc, tmp + cur)
      }._1.length
    }

    s match {
      case s1 if s1.isEmpty || s1 == "" => 0
      case _ => 1 + removePalindromeSub(s.drop(maxPal(s)))
    }
  }

  def removePalindromeSub(s: String): Int = {
    s match {
      case "" => 0
      case s if s == s.reverse => 1
      case _ => 2
    }
  }
}
